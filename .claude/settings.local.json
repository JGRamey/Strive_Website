{
  "permissions": {
    "allow": [
      "Bash(find:*)",
      "Bash(python3:*)",
      "Bash(cp:*)",
      "Bash(mkdir:*)",
      "Bash(python3:*)",
      "Bash(__NEW_LINE__ echo \"Directory structure:\")",
      "Bash(ls:*)",
      "Bash(__NEW_LINE__ echo \"File line counts:\")",
      "Bash(__NEW_LINE__ echo \"Archive verification:\")",
      "Bash(__NEW_LINE__ echo \"üìã Chat Log Status:\")",
      "Bash(__NEW_LINE__ echo \"\")",
      "Bash(grep:*)",
      "Bash(for:*)",
      "Bash(do wc:*)",
      "Bash(done)",
      "Bash(python:*)",
      "Bash(mv:*)",
      "Bash(sed:*)",
      "mcp__serena__search_for_pattern",
      "mcp__serena__list_dir",
      "mcp__serena__check_onboarding_performed",
      "mcp__serena__read_memory",
      "mcp__serena__list_dir",
      "mcp__serena__list_memories",
      "mcp__serena__get_symbols_overview",
      "mcp__serena__find_symbol",
      "mcp__serena__get_symbols_overview",
      "WebFetch(domain:qdrant.tech)",
      "WebFetch(domain:python-client.qdrant.tech)",
      "mcp__sequential-thinking__sequentialthinking",
      "mcp__memory__read_graph",
      "mcp__serena__find_file",
      "mcp__serena__think_about_collected_information",
      "Bash(/Users/grant/.pyenv/versions/3.12.11/bin/python -c \"\nimport streamlit, pandas, httpx, plotly\nprint('‚úÖ All core packages available')\n\")",
      "Bash(/Users/grant/.pyenv/versions/3.12.11/bin/python -c \"\nimport sys\nsys.path.append('.')\ntry:\n    # Test importing the operations console query interface directly  \n    from pages.operations_console.query_interface import show_query_editor\n    print('‚úÖ Import successful - No relative import issue')\nexcept ImportError as e:\n    print(f'‚ùå Import error confirmed: {e}')\nexcept Exception as e:\n    print(f'‚ùå Other error: {e}')\n\")",
      "Bash(/Users/grant/.pyenv/versions/3.12.11/bin/python -c \"\nimport sys\nsys.path.insert(0, '.')\ntry:\n    # This simulates the actual failing import from the Operations Console file\n    from .operations_console.query_interface import show_query_editor\n    print('‚úÖ Relative import works')\nexcept ImportError as e:\n    print(f'‚ùå Relative import error confirmed: {e}')\nexcept SyntaxError as e:\n    print(f'‚ùå Syntax error (expected for relative import): {e}')\nexcept Exception as e:\n    print(f'‚ùå Other error: {e}')\n\")",
      "Bash(/Users/grant/.pyenv/versions/3.12.11/bin/python:*)",
      "Bash(pip install:*)",
      "Bash(curl:*)",
      "Bash(PYTHONPATH=/Users/grant/Documents/GitHub/MCP_Ygg /Users/grant/.pyenv/versions/3.12.11/bin/python api/fastapi_main.py)",
      "Bash(pkill:*)",
      "Bash(PYTHONPATH=/Users/grant/Documents/GitHub/MCP_Ygg /Users/grant/.pyenv/versions/3.12.11/bin/python -m streamlit run main_dashboard.py --server.port 8502 --server.headless true)",
      "Bash(PYTHONPATH=/Users/grant/Documents/GitHub/MCP_Ygg /Users/grant/.pyenv/versions/3.12.11/bin/python -c \"\nimport sys\nimport streamlit as st\n\n# Test basic imports first\nprint(''Testing page imports...'')\n\ntry:\n    from pages import database_manager\n    print(''‚úÖ Database Manager imports OK'')\nexcept Exception as e:\n    print(f''‚ùå Database Manager import error: {e}'')\n\ntry:\n    from pages import graph_editor  \n    print(''‚úÖ Graph Editor imports OK'')\nexcept Exception as e:\n    print(f''‚ùå Graph Editor import error: {e}'')\n\ntry:\n    from pages import file_manager\n    print(''‚úÖ File Manager imports OK'')\nexcept Exception as e:\n    print(f''‚ùå File Manager import error: {e}'')\n\ntry:\n    from pages import operations_console\n    print(''‚úÖ Operations Console imports OK'')\nexcept Exception as e:\n    print(f''‚ùå Operations Console import error: {e}'')\n\nprint(''Basic page import test completed'')\n\")",
      "Bash(PYTHONPATH=/Users/grant/Documents/GitHub/MCP_Ygg /Users/grant/.pyenv/versions/3.12.11/bin/python -c \"\nimport sys\nimport os\n\n# Set up environment\nos.environ['STREAMLIT_SERVER_HEADLESS'] = 'true'\nos.environ['STREAMLIT_SERVER_RUNNING_WITH_STREAMLIT'] = 'true'\n\nprint('Testing page imports with secrets...')\n\ntry:\n    import streamlit as st\n    # Initialize secrets\n    st.secrets\n    print('‚úÖ Streamlit secrets loaded')\nexcept Exception as e:\n    print(f'‚ö†Ô∏è Streamlit secrets issue: {e}')\n\ntry:\n    from pages import database_manager\n    print('‚úÖ Database Manager imports OK')\nexcept Exception as e:\n    print(f'‚ùå Database Manager import error: {e}')\n\ntry:\n    from pages import graph_editor  \n    print('‚úÖ Graph Editor imports OK')\nexcept Exception as e:\n    print(f'‚ùå Graph Editor import error: {e}')\n\ntry:\n    from pages import file_manager\n    print('‚úÖ File Manager imports OK')\nexcept Exception as e:\n    print(f'‚ùå File Manager import error: {e}')\n\ntry:\n    from pages import operations_console\n    print('‚úÖ Operations Console imports OK')\nexcept Exception as e:\n    print(f'‚ùå Operations Console import error: {e}')\n\ntry:\n    from pages import knowledge_tools\n    print('‚úÖ Knowledge Tools imports OK')\nexcept Exception as e:\n    print(f'‚ùå Knowledge Tools import error: {e}')\n\ntry:\n    from pages import analytics_dashboard\n    print('‚úÖ Analytics Dashboard imports OK') \nexcept Exception as e:\n    print(f'‚ùå Analytics Dashboard import error: {e}')\n\ntry:\n    from pages import content_scraper\n    print('‚úÖ Content Scraper imports OK')\nexcept Exception as e:\n    print(f'‚ùå Content Scraper import error: {e}')\n\ntry:\n    from pages import processing_queue\n    print('‚úÖ Processing Queue imports OK')\nexcept Exception as e:\n    print(f'‚ùå Processing Queue import error: {e}')\n\nprint('Page import test completed')\n\")",
      "WebFetch(domain:docs.google.com)",
      "Bash(powershell:*)",
      "Read(C:\\Users\\zochr\\AppData\\Roaming\\Claude/**)",
      "Bash(uvx mcp-serena:*)",
      "Bash(uv search:*)",
      "Bash(uvx:*)",
      "Bash(pip index versions:*)",
      "Bash(set SERENA_PROJECT_PATH=C:UserszochrDesktopGitHubYggdrasilStrive-Website)",
      "Bash(git clone:*)",
      "Read(C:\\Users\\zochr\\AppData\\Roaming\\Code\\User/**)",
      "Read(C:\\Users\\zochr\\.vscode\\extensions\\anthropic.claude-code-1.0.98/**)",
      "Read(C:\\Users\\zochr\\.vscode\\extensions\\anthropic.claude-code-1.0.98/**)",
      "Read(C:\\Users\\zochr\\.vscode\\extensions\\anthropic.claude-code-1.0.98/**)",
      "Bash(test:*)",
      "Read(C:\\Users\\zochr\\Desktop\\GitHub\\Yggdrasil\\MCP_Ygg\\.claude/**)",
      "Read(C:\\Users\\zochr\\Desktop\\GitHub\\Yggdrasil\\MCP_Ygg\\.serena/**)",
      "Read(C:\\Users\\zochr\\.serena/**)",
      "Read(C:\\Users\\zochr\\.serena/**)",
      "WebFetch(domain:github.com)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(npm install:*)",
      "Bash(npm run check:*)",
      "Bash(npx tsx:*)",
      "Bash(node:*)",
      "Bash(timeout 10s npm run dev)",
      "Bash(npm run test:db:*)",
      "Bash(start \"\" \"C:\\Users\\zochr\\Desktop\\GitHub\\Claude-Code-IDE\\example_preview\\portfolio.html\")",
      "Read(C:\\Users\\zochr\\Desktop\\GitHub\\Claude-Code-IDE/**)",
      "Read(C:\\Users\\zochr\\Desktop\\GitHub\\Claude-Code-IDE/**)",
      "Read(C:\\Users\\zochr\\Desktop\\GitHub\\Claude-Code-IDE/**)",
      "Bash(rg:*)",
      "Bash(jq:*)",
      "Bash(/dev/null)",
      "Bash(claude mcp:*)",
      "Bash(touch:*)",
      "WebFetch(domain:docs.anthropic.com)",
      "Websearch"
    ],
    "deny": []
  },
  "enabledMcpjsonServers": [
    "serena"
  ]
}